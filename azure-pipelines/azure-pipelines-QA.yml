trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  workingDirectory: 'environments/QA'
  serviceConnection: 'dhdp-infra-sc'
  backendResourceGroup: 'dhdp-qat-resource-group'
  backendStorageAccount: 'dhdplabsa'
  backendContainerName: 'tfstate'
  backendKey: 'qa.terraform.tfstate'

stages:
  - stage: Lint
    displayName: 'Terraform Lint'
    jobs:
      - job: Lint
        displayName: 'Lint Terraform Code'
        steps:
          - checkout: self
            persistCredentials: true

          - script: |
              echo "Installing tflint..."
              curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
              tflint --init
              tflint --chdir=$(workingDirectory) || echo "TFLint found issues, but continuing..."
            displayName: 'Run tflint on Terraform Code'

  - stage: Init
    displayName: 'Terraform Init'
    dependsOn: Lint
    jobs:
      - job: Init
        displayName: 'Terraform Initialization'
        steps:
          - checkout: self
            persistCredentials: true

          - script: |
              rm -rf .terraform
              rm -f .terraform.lock.hcl
            displayName: 'Clean .terraform and lockfile'

          - script: |
              echo "##vso[task.setvariable variable=ARM_USE_OIDC]true"
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(servicePrincipalId)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            displayName: 'Set OIDC Auth Variables'

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '1.5.7'

          - script: terraform -version
            displayName: 'Show Terraform Version'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(workingDirectory)'
              backendServiceArm: '$(serviceConnection)'
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: '$(backendContainerName)'
              backendAzureRmKey: '$(backendKey)'
              backendAzureRmUseOIDC: true
              useTerraformVersion: '1.5.7'
